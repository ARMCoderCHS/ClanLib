
#pragma once

class GlslAstVariable;
class GlslAstIntConstant;
class GlslAstUIntConstant;
class GlslAstFloatConstant;
class GlslAstDoubleConstant;
class GlslAstBoolConstant;
class GlslAstVariableIdentifer;
class GlslAstFieldSelectorOrSwizzle;
class GlslAstArraySubscript;
class GlslAstFunctionCall;
class GlslAstConstructorCall;
class GlslAstUnaryPrefixIncrementExpression;
class GlslAstUnaryPrefixDecrementExpression;
class GlslAstUnaryPostfixIncrementExpression;
class GlslAstUnaryPostfixDecrementExpression;
class GlslAstUnaryPlusExpression;
class GlslAstUnaryMinusExpression;
class GlslAstUnaryBitNotExpression;
class GlslAstUnaryLogicalNotExpression;
class GlslAstAssignmentExpression;
class GlslAstPlusExpression;
class GlslAstMinusExpression;
class GlslAstMultiplyExpression;
class GlslAstDivideExpression;
class GlslAstModulusExpression;
class GlslAstShiftLeftExpression;
class GlslAstShiftRightExpression;
class GlslAstLessExpression;
class GlslAstLessEqualExpression;
class GlslAstGreaterExpression;
class GlslAstGreaterEqualExpression;
class GlslAstEqualExpression;
class GlslAstNotEqualExpression;
class GlslAstBitAndExpression;
class GlslAstBitXorExpression;
class GlslAstBitOrExpression;
class GlslAstLogicalAndExpression;
class GlslAstLogicalXorExpression;
class GlslAstLogicalOrExpression;
class GlslAstSelectExpression;
class GlslAstSequenceExpression;

class GlslExpressionVisitor
{
public:
	virtual void expression(GlslAstIntConstant *node) = 0;
	virtual void expression(GlslAstUIntConstant *node) = 0;
	virtual void expression(GlslAstFloatConstant *node) = 0;
	virtual void expression(GlslAstDoubleConstant *node) = 0;
	virtual void expression(GlslAstBoolConstant *node) = 0;
	virtual void expression(GlslAstVariableIdentifer *node) = 0;
	virtual void expression(GlslAstFieldSelectorOrSwizzle *node) = 0;
	virtual void expression(GlslAstArraySubscript *node) = 0;
	virtual void expression(GlslAstFunctionCall *node) = 0;
	virtual void expression(GlslAstConstructorCall *node) = 0;
	virtual void expression(GlslAstUnaryPrefixIncrementExpression *node) = 0;
	virtual void expression(GlslAstUnaryPrefixDecrementExpression *node) = 0;
	virtual void expression(GlslAstUnaryPostfixIncrementExpression *node) = 0;
	virtual void expression(GlslAstUnaryPostfixDecrementExpression *node) = 0;
	virtual void expression(GlslAstUnaryPlusExpression *node) = 0;
	virtual void expression(GlslAstUnaryMinusExpression *node) = 0;
	virtual void expression(GlslAstUnaryBitNotExpression *node) = 0;
	virtual void expression(GlslAstUnaryLogicalNotExpression *node) = 0;
	virtual void expression(GlslAstAssignmentExpression *node) = 0;
	virtual void expression(GlslAstPlusExpression *node) = 0;
	virtual void expression(GlslAstMinusExpression *node) = 0;
	virtual void expression(GlslAstMultiplyExpression *node) = 0;
	virtual void expression(GlslAstDivideExpression *node) = 0;
	virtual void expression(GlslAstModulusExpression *node) = 0;
	virtual void expression(GlslAstShiftLeftExpression *node) = 0;
	virtual void expression(GlslAstShiftRightExpression *node) = 0;
	virtual void expression(GlslAstLessExpression *node) = 0;
	virtual void expression(GlslAstLessEqualExpression *node) = 0;
	virtual void expression(GlslAstGreaterExpression *node) = 0;
	virtual void expression(GlslAstGreaterEqualExpression *node) = 0;
	virtual void expression(GlslAstEqualExpression *node) = 0;
	virtual void expression(GlslAstNotEqualExpression *node) = 0;
	virtual void expression(GlslAstBitAndExpression *node) = 0;
	virtual void expression(GlslAstBitXorExpression *node) = 0;
	virtual void expression(GlslAstBitOrExpression *node) = 0;
	virtual void expression(GlslAstLogicalAndExpression *node) = 0;
	virtual void expression(GlslAstLogicalXorExpression *node) = 0;
	virtual void expression(GlslAstLogicalOrExpression *node) = 0;
	virtual void expression(GlslAstSelectExpression *node) = 0;
	virtual void expression(GlslAstSequenceExpression *node) = 0;
};
