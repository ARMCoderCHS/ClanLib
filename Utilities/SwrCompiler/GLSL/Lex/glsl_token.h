
#pragma once

class GlslToken
{
public:
	GlslToken() : type(type_eof), keyword(keyword_attribute), oper(operator_paranthesis_begin), int_constant(0), float_constant(0.0f), double_constant(0.0) { }

	enum Type
	{
		type_eof,
		type_whitespace,
		type_comment,
		type_keyword,
		type_identifier,
		type_int_constant,
		type_uint_constant,
		type_float_constant,
		type_double_constant,
		type_operator,
		type_semicolon,
		type_scope_begin,
		type_scope_end
	};

	enum Keyword
	{
		keyword_attribute,
		keyword_const,
		keyword_uniform,
		keyword_varying,
		keyword_coherent,
		keyword_volatile,
		keyword_restrict,
		keyword_readonly,
		keyword_writeonly,
		keyword_atomic_uint,
		keyword_layout,
		keyword_centroid,
		keyword_flat,
		keyword_smooth,
		keyword_noperspective,
		keyword_patch,
		keyword_sample,
		keyword_break,
		keyword_continue,
		keyword_do,
		keyword_for,
		keyword_while,
		keyword_switch,
		keyword_case,
		keyword_default,
		keyword_if,
		keyword_else,
		keyword_subroutine,
		keyword_in,
		keyword_out,
		keyword_inout,
		keyword_float,
		keyword_double,
		keyword_int,
		keyword_void,
		keyword_bool,
		keyword_true,
		keyword_false,
		keyword_invariant,
		keyword_discard,
		keyword_return,
		keyword_mat2,
		keyword_mat3,
		keyword_mat4,
		keyword_dmat2,
		keyword_dmat3,
		keyword_dmat4,
		keyword_mat2x2,
		keyword_mat2x3,
		keyword_mat2x4,
		keyword_dmat2x2,
		keyword_dmat2x3,
		keyword_dmat2x4,
		keyword_mat3x2,
		keyword_mat3x3,
		keyword_mat3x4,
		keyword_dmat3x2,
		keyword_dmat3x3,
		keyword_dmat3x4,
		keyword_mat4x2,
		keyword_mat4x3,
		keyword_mat4x4,
		keyword_dmat4x2,
		keyword_dmat4x3,
		keyword_dmat4x4,
		keyword_vec2,
		keyword_vec3,
		keyword_vec4,
		keyword_ivec2,
		keyword_ivec3,
		keyword_ivec4,
		keyword_bvec2,
		keyword_bvec3,
		keyword_bvec4,
		keyword_dvec2,
		keyword_dvec3,
		keyword_dvec4,
		keyword_uint,
		keyword_uvec2,
		keyword_uvec3,
		keyword_uvec4,
		keyword_lowp,
		keyword_mediump,
		keyword_highp,
		keyword_precision,
		keyword_sampler1D,
		keyword_sampler2D,
		keyword_sampler3D,
		keyword_samplerCube,
		keyword_sampler1DShadow,
		keyword_sampler2DShadow,
		keyword_samplerCubeShadow,
		keyword_sampler1DArray,
		keyword_sampler2DArray,
		keyword_sampler1DArrayShadow,
		keyword_sampler2DArrayShadow,
		keyword_isampler1D,
		keyword_isampler2D,
		keyword_isampler3D,
		keyword_isamplerCube,
		keyword_isampler1DArray,
		keyword_isampler2DArray,
		keyword_usampler1D,
		keyword_usampler2D,
		keyword_usampler3D,
		keyword_usamplerCube,
		keyword_usampler1DArray,
		keyword_usampler2DArray,
		keyword_sampler2DRect,
		keyword_sampler2DRectShadow,
		keyword_isampler2DRect,
		keyword_usampler2DRect,
		keyword_samplerBuffer,
		keyword_isamplerBuffer,
		keyword_usamplerBuffer,
		keyword_sampler2DMS,
		keyword_isampler2DMS,
		keyword_usampler2DMS,
		keyword_sampler2DMSArray,
		keyword_isampler2DMSArray,
		keyword_usampler2DMSArray,
		keyword_samplerCubeArray,
		keyword_samplerCubeArrayShadow,
		keyword_isamplerCubeArray,
		keyword_usamplerCubeArray,
		keyword_image1D,
		keyword_iimage1D,
		keyword_uimage1D,
		keyword_image2D,
		keyword_iimage2D,
		keyword_uimage2D,
		keyword_image3D,
		keyword_iimage3D,
		keyword_uimage3D,
		keyword_image2DRect,
		keyword_iimage2DRect,
		keyword_uimage2DRect,
		keyword_imageCube,
		keyword_iimageCube,
		keyword_uimageCube,
		keyword_imageBuffer,
		keyword_iimageBuffer,
		keyword_uimageBuffer,
		keyword_image1DArray,
		keyword_iimage1DArray,
		keyword_uimage1DArray,
		keyword_image2DArray,
		keyword_iimage2DArray,
		keyword_uimage2DArray,
		keyword_imageCubeArray,
		keyword_iimageCubeArray,
		keyword_uimageCubeArray,
		keyword_image2DMS,
		keyword_iimage2DMS,
		keyword_uimage2DMS,
		keyword_image2DMSArray,
		keyword_iimage2DMSArray,
		keyword_uimage2DMSArray,
		keyword_struct,

		// Reserved:
		keyword_common,
		keyword_partition,
		keyword_active,
		keyword_asm,
		keyword_class,
		keyword_union,
		keyword_enum,
		keyword_typedef,
		keyword_template,
		keyword_this,
		keyword_packed,
		keyword_resource,
		keyword_goto,
		keyword_inline,
		keyword_noinline,
		keyword_public,
		keyword_static,
		keyword_extern,
		keyword_external,
		keyword_interface,
		keyword_long,
		keyword_short,
		keyword_half,
		keyword_fixed,
		keyword_unsigned,
		keyword_superp,
		keyword_input,
		keyword_output,
		keyword_hvec2,
		keyword_hvec3,
		keyword_hvec4,
		keyword_fvec2,
		keyword_fvec3,
		keyword_fvec4,
		keyword_sampler3DRect,
		keyword_filter,
		keyword_sizeof,
		keyword_cast,
		keyword_namespace,
		keyword_using,
		keyword_row_major,
		keyword_2underscores // In addition, all identifiers containing two consecutive underscores (__) are reserved as possible future keywords.
	};

	enum Operator
	{
		operator_paranthesis_begin,
		operator_paranthesis_end,
		operator_bracket_begin,
		operator_bracket_end,
		operator_dot,
		operator_increment,
		operator_decrement,
		operator_plus,
		operator_minus,
		operator_bit_not,
		operator_logical_not,
		operator_multiply,
		operator_divide,
		operator_modulus,
		operator_shift_left,
		operator_shift_right,
		operator_less,
		operator_greater,
		operator_less_equal,
		operator_greater_equal,
		operator_equal,
		operator_not_equal,
		operator_bit_and,
		operator_bit_xor,
		operator_bit_or,
		operator_logical_and,
		operator_logical_xor,
		operator_logical_or,
		operator_questionmark,
		operator_colon,
		operator_assign,
		operator_add_assign,
		operator_sub_assign,
		operator_multiply_assign,
		operator_divide_assign,
		operator_modulus_assign,
		operator_shift_left_assign,
		operator_shift_right_assign,
		operator_bit_and_assign,
		operator_bit_xor_assign,
		operator_bit_or_assign,
		operator_comma
	};

	Type type;
	Keyword keyword;
	Operator oper;
	std::string identifier;
	int int_constant;
	float float_constant;
	double double_constant;
};
